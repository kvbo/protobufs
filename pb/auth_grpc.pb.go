// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_SigninWithEmail_FullMethodName              = "/AuthService/SigninWithEmail"
	AuthService_SigninWithEmailPassword_FullMethodName      = "/AuthService/SigninWithEmailPassword"
	AuthService_SigninWithEmailPhonePassword_FullMethodName = "/AuthService/SigninWithEmailPhonePassword"
	AuthService_SigninWithPhone_FullMethodName              = "/AuthService/SigninWithPhone"
	AuthService_SigninWithPhonePassword_FullMethodName      = "/AuthService/SigninWithPhonePassword"
	AuthService_SignupWithEmail_FullMethodName              = "/AuthService/SignupWithEmail"
	AuthService_SignupWithEmailPassword_FullMethodName      = "/AuthService/SignupWithEmailPassword"
	AuthService_SignupWithEmailPhonePassword_FullMethodName = "/AuthService/SignupWithEmailPhonePassword"
	AuthService_SignupWithPhone_FullMethodName              = "/AuthService/SignupWithPhone"
	AuthService_SignupWithPhonePassword_FullMethodName      = "/AuthService/SignupWithPhonePassword"
	AuthService_VerifyToken_FullMethodName                  = "/AuthService/VerifyToken"
	AuthService_AssignRole_FullMethodName                   = "/AuthService/AssignRole"
	AuthService_RefreshToken_FullMethodName                 = "/AuthService/RefreshToken"
	AuthService_Logout_FullMethodName                       = "/AuthService/Logout"
	AuthService_GetPublicKey_FullMethodName                 = "/AuthService/GetPublicKey"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	SigninWithEmail(ctx context.Context, in *EmailOnly, opts ...grpc.CallOption) (*SigninResponse, error)
	SigninWithEmailPassword(ctx context.Context, in *EmailPassword, opts ...grpc.CallOption) (*SigninResponse, error)
	SigninWithEmailPhonePassword(ctx context.Context, in *EmailPhonePassword, opts ...grpc.CallOption) (*SigninResponse, error)
	SigninWithPhone(ctx context.Context, in *PhoneOnly, opts ...grpc.CallOption) (*SigninResponse, error)
	SigninWithPhonePassword(ctx context.Context, in *PhonePassword, opts ...grpc.CallOption) (*SigninResponse, error)
	SignupWithEmail(ctx context.Context, in *EmailOnly, opts ...grpc.CallOption) (*SigninResponse, error)
	SignupWithEmailPassword(ctx context.Context, in *EmailPassword, opts ...grpc.CallOption) (*SigninResponse, error)
	SignupWithEmailPhonePassword(ctx context.Context, in *EmailPhonePassword, opts ...grpc.CallOption) (*SigninResponse, error)
	SignupWithPhone(ctx context.Context, in *PhoneOnly, opts ...grpc.CallOption) (*SigninResponse, error)
	SignupWithPhonePassword(ctx context.Context, in *PhonePassword, opts ...grpc.CallOption) (*SigninResponse, error)
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*SigninResponse, error)
	AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*AssignRoleResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*SigninResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	GetPublicKey(ctx context.Context, in *PublickeyRequest, opts ...grpc.CallOption) (*PublickeyResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) SigninWithEmail(ctx context.Context, in *EmailOnly, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_SigninWithEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SigninWithEmailPassword(ctx context.Context, in *EmailPassword, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_SigninWithEmailPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SigninWithEmailPhonePassword(ctx context.Context, in *EmailPhonePassword, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_SigninWithEmailPhonePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SigninWithPhone(ctx context.Context, in *PhoneOnly, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_SigninWithPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SigninWithPhonePassword(ctx context.Context, in *PhonePassword, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_SigninWithPhonePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignupWithEmail(ctx context.Context, in *EmailOnly, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_SignupWithEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignupWithEmailPassword(ctx context.Context, in *EmailPassword, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_SignupWithEmailPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignupWithEmailPhonePassword(ctx context.Context, in *EmailPhonePassword, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_SignupWithEmailPhonePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignupWithPhone(ctx context.Context, in *PhoneOnly, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_SignupWithPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignupWithPhonePassword(ctx context.Context, in *PhonePassword, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_SignupWithPhonePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*AssignRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignRoleResponse)
	err := c.cc.Invoke(ctx, AuthService_AssignRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*SigninResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninResponse)
	err := c.cc.Invoke(ctx, AuthService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, AuthService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetPublicKey(ctx context.Context, in *PublickeyRequest, opts ...grpc.CallOption) (*PublickeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublickeyResponse)
	err := c.cc.Invoke(ctx, AuthService_GetPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	SigninWithEmail(context.Context, *EmailOnly) (*SigninResponse, error)
	SigninWithEmailPassword(context.Context, *EmailPassword) (*SigninResponse, error)
	SigninWithEmailPhonePassword(context.Context, *EmailPhonePassword) (*SigninResponse, error)
	SigninWithPhone(context.Context, *PhoneOnly) (*SigninResponse, error)
	SigninWithPhonePassword(context.Context, *PhonePassword) (*SigninResponse, error)
	SignupWithEmail(context.Context, *EmailOnly) (*SigninResponse, error)
	SignupWithEmailPassword(context.Context, *EmailPassword) (*SigninResponse, error)
	SignupWithEmailPhonePassword(context.Context, *EmailPhonePassword) (*SigninResponse, error)
	SignupWithPhone(context.Context, *PhoneOnly) (*SigninResponse, error)
	SignupWithPhonePassword(context.Context, *PhonePassword) (*SigninResponse, error)
	VerifyToken(context.Context, *VerifyTokenRequest) (*SigninResponse, error)
	AssignRole(context.Context, *AssignRoleRequest) (*AssignRoleResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*SigninResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	GetPublicKey(context.Context, *PublickeyRequest) (*PublickeyResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) SigninWithEmail(context.Context, *EmailOnly) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigninWithEmail not implemented")
}
func (UnimplementedAuthServiceServer) SigninWithEmailPassword(context.Context, *EmailPassword) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigninWithEmailPassword not implemented")
}
func (UnimplementedAuthServiceServer) SigninWithEmailPhonePassword(context.Context, *EmailPhonePassword) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigninWithEmailPhonePassword not implemented")
}
func (UnimplementedAuthServiceServer) SigninWithPhone(context.Context, *PhoneOnly) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigninWithPhone not implemented")
}
func (UnimplementedAuthServiceServer) SigninWithPhonePassword(context.Context, *PhonePassword) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigninWithPhonePassword not implemented")
}
func (UnimplementedAuthServiceServer) SignupWithEmail(context.Context, *EmailOnly) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupWithEmail not implemented")
}
func (UnimplementedAuthServiceServer) SignupWithEmailPassword(context.Context, *EmailPassword) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupWithEmailPassword not implemented")
}
func (UnimplementedAuthServiceServer) SignupWithEmailPhonePassword(context.Context, *EmailPhonePassword) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupWithEmailPhonePassword not implemented")
}
func (UnimplementedAuthServiceServer) SignupWithPhone(context.Context, *PhoneOnly) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupWithPhone not implemented")
}
func (UnimplementedAuthServiceServer) SignupWithPhonePassword(context.Context, *PhonePassword) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupWithPhonePassword not implemented")
}
func (UnimplementedAuthServiceServer) VerifyToken(context.Context, *VerifyTokenRequest) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedAuthServiceServer) AssignRole(context.Context, *AssignRoleRequest) (*AssignRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRole not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*SigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) GetPublicKey(context.Context, *PublickeyRequest) (*PublickeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_SigninWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailOnly)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SigninWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SigninWithEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SigninWithEmail(ctx, req.(*EmailOnly))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SigninWithEmailPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SigninWithEmailPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SigninWithEmailPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SigninWithEmailPassword(ctx, req.(*EmailPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SigninWithEmailPhonePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailPhonePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SigninWithEmailPhonePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SigninWithEmailPhonePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SigninWithEmailPhonePassword(ctx, req.(*EmailPhonePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SigninWithPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneOnly)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SigninWithPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SigninWithPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SigninWithPhone(ctx, req.(*PhoneOnly))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SigninWithPhonePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SigninWithPhonePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SigninWithPhonePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SigninWithPhonePassword(ctx, req.(*PhonePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SignupWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailOnly)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignupWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SignupWithEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignupWithEmail(ctx, req.(*EmailOnly))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SignupWithEmailPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignupWithEmailPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SignupWithEmailPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignupWithEmailPassword(ctx, req.(*EmailPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SignupWithEmailPhonePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailPhonePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignupWithEmailPhonePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SignupWithEmailPhonePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignupWithEmailPhonePassword(ctx, req.(*EmailPhonePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SignupWithPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneOnly)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignupWithPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SignupWithPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignupWithPhone(ctx, req.(*PhoneOnly))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SignupWithPhonePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignupWithPhonePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SignupWithPhonePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignupWithPhonePassword(ctx, req.(*PhonePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyToken(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AssignRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AssignRole(ctx, req.(*AssignRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublickeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetPublicKey(ctx, req.(*PublickeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SigninWithEmail",
			Handler:    _AuthService_SigninWithEmail_Handler,
		},
		{
			MethodName: "SigninWithEmailPassword",
			Handler:    _AuthService_SigninWithEmailPassword_Handler,
		},
		{
			MethodName: "SigninWithEmailPhonePassword",
			Handler:    _AuthService_SigninWithEmailPhonePassword_Handler,
		},
		{
			MethodName: "SigninWithPhone",
			Handler:    _AuthService_SigninWithPhone_Handler,
		},
		{
			MethodName: "SigninWithPhonePassword",
			Handler:    _AuthService_SigninWithPhonePassword_Handler,
		},
		{
			MethodName: "SignupWithEmail",
			Handler:    _AuthService_SignupWithEmail_Handler,
		},
		{
			MethodName: "SignupWithEmailPassword",
			Handler:    _AuthService_SignupWithEmailPassword_Handler,
		},
		{
			MethodName: "SignupWithEmailPhonePassword",
			Handler:    _AuthService_SignupWithEmailPhonePassword_Handler,
		},
		{
			MethodName: "SignupWithPhone",
			Handler:    _AuthService_SignupWithPhone_Handler,
		},
		{
			MethodName: "SignupWithPhonePassword",
			Handler:    _AuthService_SignupWithPhonePassword_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _AuthService_VerifyToken_Handler,
		},
		{
			MethodName: "AssignRole",
			Handler:    _AuthService_AssignRole_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _AuthService_GetPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
