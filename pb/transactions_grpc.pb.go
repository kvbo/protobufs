// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: transactions.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionService_CreateInstantTransaction_FullMethodName = "/TransactionService/CreateInstantTransaction"
	TransactionService_StartTransaction_FullMethodName         = "/TransactionService/StartTransaction"
	TransactionService_CompleteTransaction_FullMethodName      = "/TransactionService/CompleteTransaction"
	TransactionService_CancelTransaction_FullMethodName        = "/TransactionService/CancelTransaction"
	TransactionService_StartReversal_FullMethodName            = "/TransactionService/StartReversal"
	TransactionService_CompleteReversal_FullMethodName         = "/TransactionService/CompleteReversal"
	TransactionService_CancelReversal_FullMethodName           = "/TransactionService/CancelReversal"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ==== Service ====
type TransactionServiceClient interface {
	CreateInstantTransaction(ctx context.Context, in *CreateInstantTransactionRequest, opts ...grpc.CallOption) (*CreateInstantTransactionResponse, error)
	StartTransaction(ctx context.Context, in *StartTransactionRequest, opts ...grpc.CallOption) (*StartTransactionResponse, error)
	CompleteTransaction(ctx context.Context, in *CompleteTransactionRequest, opts ...grpc.CallOption) (*CompleteTransactionResponse, error)
	CancelTransaction(ctx context.Context, in *CancelTransactionRequest, opts ...grpc.CallOption) (*CancelTransactionResponse, error)
	StartReversal(ctx context.Context, in *StartReversalRequest, opts ...grpc.CallOption) (*StartReversalResponse, error)
	CompleteReversal(ctx context.Context, in *CompleteReversalRequest, opts ...grpc.CallOption) (*CompleteReversalResponse, error)
	CancelReversal(ctx context.Context, in *CancelReversalRequest, opts ...grpc.CallOption) (*CancelReversalResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) CreateInstantTransaction(ctx context.Context, in *CreateInstantTransactionRequest, opts ...grpc.CallOption) (*CreateInstantTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInstantTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_CreateInstantTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) StartTransaction(ctx context.Context, in *StartTransactionRequest, opts ...grpc.CallOption) (*StartTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_StartTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CompleteTransaction(ctx context.Context, in *CompleteTransactionRequest, opts ...grpc.CallOption) (*CompleteTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_CompleteTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CancelTransaction(ctx context.Context, in *CancelTransactionRequest, opts ...grpc.CallOption) (*CancelTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_CancelTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) StartReversal(ctx context.Context, in *StartReversalRequest, opts ...grpc.CallOption) (*StartReversalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartReversalResponse)
	err := c.cc.Invoke(ctx, TransactionService_StartReversal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CompleteReversal(ctx context.Context, in *CompleteReversalRequest, opts ...grpc.CallOption) (*CompleteReversalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteReversalResponse)
	err := c.cc.Invoke(ctx, TransactionService_CompleteReversal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CancelReversal(ctx context.Context, in *CancelReversalRequest, opts ...grpc.CallOption) (*CancelReversalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelReversalResponse)
	err := c.cc.Invoke(ctx, TransactionService_CancelReversal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations should embed UnimplementedTransactionServiceServer
// for forward compatibility.
//
// ==== Service ====
type TransactionServiceServer interface {
	CreateInstantTransaction(context.Context, *CreateInstantTransactionRequest) (*CreateInstantTransactionResponse, error)
	StartTransaction(context.Context, *StartTransactionRequest) (*StartTransactionResponse, error)
	CompleteTransaction(context.Context, *CompleteTransactionRequest) (*CompleteTransactionResponse, error)
	CancelTransaction(context.Context, *CancelTransactionRequest) (*CancelTransactionResponse, error)
	StartReversal(context.Context, *StartReversalRequest) (*StartReversalResponse, error)
	CompleteReversal(context.Context, *CompleteReversalRequest) (*CompleteReversalResponse, error)
	CancelReversal(context.Context, *CancelReversalRequest) (*CancelReversalResponse, error)
}

// UnimplementedTransactionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) CreateInstantTransaction(context.Context, *CreateInstantTransactionRequest) (*CreateInstantTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstantTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) StartTransaction(context.Context, *StartTransactionRequest) (*StartTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) CompleteTransaction(context.Context, *CompleteTransactionRequest) (*CompleteTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) CancelTransaction(context.Context, *CancelTransactionRequest) (*CancelTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) StartReversal(context.Context, *StartReversalRequest) (*StartReversalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReversal not implemented")
}
func (UnimplementedTransactionServiceServer) CompleteReversal(context.Context, *CompleteReversalRequest) (*CompleteReversalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteReversal not implemented")
}
func (UnimplementedTransactionServiceServer) CancelReversal(context.Context, *CancelReversalRequest) (*CancelReversalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReversal not implemented")
}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_CreateInstantTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstantTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateInstantTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CreateInstantTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateInstantTransaction(ctx, req.(*CreateInstantTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_StartTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).StartTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_StartTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).StartTransaction(ctx, req.(*StartTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CompleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CompleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CompleteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CompleteTransaction(ctx, req.(*CompleteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CancelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CancelTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CancelTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CancelTransaction(ctx, req.(*CancelTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_StartReversal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReversalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).StartReversal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_StartReversal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).StartReversal(ctx, req.(*StartReversalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CompleteReversal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteReversalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CompleteReversal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CompleteReversal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CompleteReversal(ctx, req.(*CompleteReversalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CancelReversal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReversalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CancelReversal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CancelReversal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CancelReversal(ctx, req.(*CancelReversalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInstantTransaction",
			Handler:    _TransactionService_CreateInstantTransaction_Handler,
		},
		{
			MethodName: "StartTransaction",
			Handler:    _TransactionService_StartTransaction_Handler,
		},
		{
			MethodName: "CompleteTransaction",
			Handler:    _TransactionService_CompleteTransaction_Handler,
		},
		{
			MethodName: "CancelTransaction",
			Handler:    _TransactionService_CancelTransaction_Handler,
		},
		{
			MethodName: "StartReversal",
			Handler:    _TransactionService_StartReversal_Handler,
		},
		{
			MethodName: "CompleteReversal",
			Handler:    _TransactionService_CompleteReversal_Handler,
		},
		{
			MethodName: "CancelReversal",
			Handler:    _TransactionService_CancelReversal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions.proto",
}
