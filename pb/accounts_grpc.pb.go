// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: accounts.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountService_GetAccounts_FullMethodName           = "/AccountService/GetAccounts"
	AccountService_GetAccount_FullMethodName            = "/AccountService/GetAccount"
	AccountService_CreateAccount_FullMethodName         = "/AccountService/CreateAccount"
	AccountService_BulkCreateAccount_FullMethodName     = "/AccountService/BulkCreateAccount"
	AccountService_UpdateAccount_FullMethodName         = "/AccountService/UpdateAccount"
	AccountService_DeleteAccount_FullMethodName         = "/AccountService/DeleteAccount"
	AccountService_GetEntries_FullMethodName            = "/AccountService/GetEntries"
	AccountService_TransferAndCommit_FullMethodName     = "/AccountService/TransferAndCommit"
	AccountService_TransferWithoutCommit_FullMethodName = "/AccountService/TransferWithoutCommit"
	AccountService_TranferCommit_FullMethodName         = "/AccountService/TranferCommit"
	AccountService_TransferCancel_FullMethodName        = "/AccountService/TransferCancel"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	GetAccounts(ctx context.Context, in *AccountQuery, opts ...grpc.CallOption) (*AccountList, error)
	GetAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	CreateAccount(ctx context.Context, in *AccountIn, opts ...grpc.CallOption) (*Account, error)
	BulkCreateAccount(ctx context.Context, in *BulkCreateAccounts, opts ...grpc.CallOption) (*Account, error)
	UpdateAccount(ctx context.Context, in *AccountUpdate, opts ...grpc.CallOption) (*AccountList, error)
	DeleteAccount(ctx context.Context, in *AccountQuery, opts ...grpc.CallOption) (*AccountList, error)
	GetEntries(ctx context.Context, in *AccountQuery, opts ...grpc.CallOption) (*Posting, error)
	TransferAndCommit(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*TransferResponse, error)
	TransferWithoutCommit(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*TransferResponse, error)
	TranferCommit(ctx context.Context, in *TransferRef, opts ...grpc.CallOption) (*TransferResponse, error)
	TransferCancel(ctx context.Context, in *TransferRef, opts ...grpc.CallOption) (*TransferResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetAccounts(ctx context.Context, in *AccountQuery, opts ...grpc.CallOption) (*AccountList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountList)
	err := c.cc.Invoke(ctx, AccountService_GetAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *AccountIn, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) BulkCreateAccount(ctx context.Context, in *BulkCreateAccounts, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountService_BulkCreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccount(ctx context.Context, in *AccountUpdate, opts ...grpc.CallOption) (*AccountList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountList)
	err := c.cc.Invoke(ctx, AccountService_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteAccount(ctx context.Context, in *AccountQuery, opts ...grpc.CallOption) (*AccountList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountList)
	err := c.cc.Invoke(ctx, AccountService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetEntries(ctx context.Context, in *AccountQuery, opts ...grpc.CallOption) (*Posting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Posting)
	err := c.cc.Invoke(ctx, AccountService_GetEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) TransferAndCommit(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, AccountService_TransferAndCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) TransferWithoutCommit(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, AccountService_TransferWithoutCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) TranferCommit(ctx context.Context, in *TransferRef, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, AccountService_TranferCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) TransferCancel(ctx context.Context, in *TransferRef, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, AccountService_TransferCancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations should embed UnimplementedAccountServiceServer
// for forward compatibility.
type AccountServiceServer interface {
	GetAccounts(context.Context, *AccountQuery) (*AccountList, error)
	GetAccount(context.Context, *Account) (*Account, error)
	CreateAccount(context.Context, *AccountIn) (*Account, error)
	BulkCreateAccount(context.Context, *BulkCreateAccounts) (*Account, error)
	UpdateAccount(context.Context, *AccountUpdate) (*AccountList, error)
	DeleteAccount(context.Context, *AccountQuery) (*AccountList, error)
	GetEntries(context.Context, *AccountQuery) (*Posting, error)
	TransferAndCommit(context.Context, *Transfer) (*TransferResponse, error)
	TransferWithoutCommit(context.Context, *Transfer) (*TransferResponse, error)
	TranferCommit(context.Context, *TransferRef) (*TransferResponse, error)
	TransferCancel(context.Context, *TransferRef) (*TransferResponse, error)
}

// UnimplementedAccountServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountServiceServer struct{}

func (UnimplementedAccountServiceServer) GetAccounts(context.Context, *AccountQuery) (*AccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedAccountServiceServer) GetAccount(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountServiceServer) CreateAccount(context.Context, *AccountIn) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) BulkCreateAccount(context.Context, *BulkCreateAccounts) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAccount(context.Context, *AccountUpdate) (*AccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountServiceServer) DeleteAccount(context.Context, *AccountQuery) (*AccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountServiceServer) GetEntries(context.Context, *AccountQuery) (*Posting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntries not implemented")
}
func (UnimplementedAccountServiceServer) TransferAndCommit(context.Context, *Transfer) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferAndCommit not implemented")
}
func (UnimplementedAccountServiceServer) TransferWithoutCommit(context.Context, *Transfer) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferWithoutCommit not implemented")
}
func (UnimplementedAccountServiceServer) TranferCommit(context.Context, *TransferRef) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranferCommit not implemented")
}
func (UnimplementedAccountServiceServer) TransferCancel(context.Context, *TransferRef) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCancel not implemented")
}
func (UnimplementedAccountServiceServer) testEmbeddedByValue() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccounts(ctx, req.(*AccountQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*AccountIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_BulkCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateAccounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).BulkCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_BulkCreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).BulkCreateAccount(ctx, req.(*BulkCreateAccounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAccount(ctx, req.(*AccountUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteAccount(ctx, req.(*AccountQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetEntries(ctx, req.(*AccountQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_TransferAndCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).TransferAndCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_TransferAndCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).TransferAndCommit(ctx, req.(*Transfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_TransferWithoutCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).TransferWithoutCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_TransferWithoutCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).TransferWithoutCommit(ctx, req.(*Transfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_TranferCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).TranferCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_TranferCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).TranferCommit(ctx, req.(*TransferRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_TransferCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).TransferCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_TransferCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).TransferCancel(ctx, req.(*TransferRef))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccounts",
			Handler:    _AccountService_GetAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountService_GetAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "BulkCreateAccount",
			Handler:    _AccountService_BulkCreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountService_DeleteAccount_Handler,
		},
		{
			MethodName: "GetEntries",
			Handler:    _AccountService_GetEntries_Handler,
		},
		{
			MethodName: "TransferAndCommit",
			Handler:    _AccountService_TransferAndCommit_Handler,
		},
		{
			MethodName: "TransferWithoutCommit",
			Handler:    _AccountService_TransferWithoutCommit_Handler,
		},
		{
			MethodName: "TranferCommit",
			Handler:    _AccountService_TranferCommit_Handler,
		},
		{
			MethodName: "TransferCancel",
			Handler:    _AccountService_TransferCancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts.proto",
}
