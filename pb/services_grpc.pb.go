// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceManager_CreateService_FullMethodName      = "/ServiceManager/CreateService"
	ServiceManager_UpdateService_FullMethodName      = "/ServiceManager/UpdateService"
	ServiceManager_GetService_FullMethodName         = "/ServiceManager/GetService"
	ServiceManager_GetServices_FullMethodName        = "/ServiceManager/GetServices"
	ServiceManager_DeleteService_FullMethodName      = "/ServiceManager/DeleteService"
	ServiceManager_AddFeeToService_FullMethodName    = "/ServiceManager/AddFeeToService"
	ServiceManager_RemoveFeeToService_FullMethodName = "/ServiceManager/RemoveFeeToService"
	ServiceManager_CalculateCharges_FullMethodName   = "/ServiceManager/CalculateCharges"
)

// ServiceManagerClient is the client API for ServiceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceManagerClient interface {
	CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*ServiceList, error)
	GetService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	GetServices(ctx context.Context, in *ServiceQuery, opts ...grpc.CallOption) (*ServiceList, error)
	DeleteService(ctx context.Context, in *ServiceQuery, opts ...grpc.CallOption) (*ServiceList, error)
	AddFeeToService(ctx context.Context, in *AddRemoveFees, opts ...grpc.CallOption) (*AddRemoveFees, error)
	RemoveFeeToService(ctx context.Context, in *AddRemoveFees, opts ...grpc.CallOption) (*AddRemoveFees, error)
	CalculateCharges(ctx context.Context, in *ChargesRequest, opts ...grpc.CallOption) (*ChargesResponse, error)
}

type serviceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceManagerClient(cc grpc.ClientConnInterface) ServiceManagerClient {
	return &serviceManagerClient{cc}
}

func (c *serviceManagerClient) CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Service)
	err := c.cc.Invoke(ctx, ServiceManager_CreateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*ServiceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceList)
	err := c.cc.Invoke(ctx, ServiceManager_UpdateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Service)
	err := c.cc.Invoke(ctx, ServiceManager_GetService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetServices(ctx context.Context, in *ServiceQuery, opts ...grpc.CallOption) (*ServiceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceList)
	err := c.cc.Invoke(ctx, ServiceManager_GetServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) DeleteService(ctx context.Context, in *ServiceQuery, opts ...grpc.CallOption) (*ServiceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceList)
	err := c.cc.Invoke(ctx, ServiceManager_DeleteService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) AddFeeToService(ctx context.Context, in *AddRemoveFees, opts ...grpc.CallOption) (*AddRemoveFees, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRemoveFees)
	err := c.cc.Invoke(ctx, ServiceManager_AddFeeToService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) RemoveFeeToService(ctx context.Context, in *AddRemoveFees, opts ...grpc.CallOption) (*AddRemoveFees, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRemoveFees)
	err := c.cc.Invoke(ctx, ServiceManager_RemoveFeeToService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) CalculateCharges(ctx context.Context, in *ChargesRequest, opts ...grpc.CallOption) (*ChargesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChargesResponse)
	err := c.cc.Invoke(ctx, ServiceManager_CalculateCharges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceManagerServer is the server API for ServiceManager service.
// All implementations must embed UnimplementedServiceManagerServer
// for forward compatibility.
type ServiceManagerServer interface {
	CreateService(context.Context, *Service) (*Service, error)
	UpdateService(context.Context, *UpdateServiceRequest) (*ServiceList, error)
	GetService(context.Context, *Service) (*Service, error)
	GetServices(context.Context, *ServiceQuery) (*ServiceList, error)
	DeleteService(context.Context, *ServiceQuery) (*ServiceList, error)
	AddFeeToService(context.Context, *AddRemoveFees) (*AddRemoveFees, error)
	RemoveFeeToService(context.Context, *AddRemoveFees) (*AddRemoveFees, error)
	CalculateCharges(context.Context, *ChargesRequest) (*ChargesResponse, error)
	mustEmbedUnimplementedServiceManagerServer()
}

// UnimplementedServiceManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceManagerServer struct{}

func (UnimplementedServiceManagerServer) CreateService(context.Context, *Service) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedServiceManagerServer) UpdateService(context.Context, *UpdateServiceRequest) (*ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedServiceManagerServer) GetService(context.Context, *Service) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedServiceManagerServer) GetServices(context.Context, *ServiceQuery) (*ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedServiceManagerServer) DeleteService(context.Context, *ServiceQuery) (*ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedServiceManagerServer) AddFeeToService(context.Context, *AddRemoveFees) (*AddRemoveFees, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeeToService not implemented")
}
func (UnimplementedServiceManagerServer) RemoveFeeToService(context.Context, *AddRemoveFees) (*AddRemoveFees, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFeeToService not implemented")
}
func (UnimplementedServiceManagerServer) CalculateCharges(context.Context, *ChargesRequest) (*ChargesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCharges not implemented")
}
func (UnimplementedServiceManagerServer) mustEmbedUnimplementedServiceManagerServer() {}
func (UnimplementedServiceManagerServer) testEmbeddedByValue()                        {}

// UnsafeServiceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceManagerServer will
// result in compilation errors.
type UnsafeServiceManagerServer interface {
	mustEmbedUnimplementedServiceManagerServer()
}

func RegisterServiceManagerServer(s grpc.ServiceRegistrar, srv ServiceManagerServer) {
	// If the following call pancis, it indicates UnimplementedServiceManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceManager_ServiceDesc, srv)
}

func _ServiceManager_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).CreateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_GetServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetServices(ctx, req.(*ServiceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).DeleteService(ctx, req.(*ServiceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_AddFeeToService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoveFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).AddFeeToService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_AddFeeToService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).AddFeeToService(ctx, req.(*AddRemoveFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_RemoveFeeToService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoveFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).RemoveFeeToService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_RemoveFeeToService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).RemoveFeeToService(ctx, req.(*AddRemoveFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_CalculateCharges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).CalculateCharges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManager_CalculateCharges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).CalculateCharges(ctx, req.(*ChargesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceManager_ServiceDesc is the grpc.ServiceDesc for ServiceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceManager",
	HandlerType: (*ServiceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _ServiceManager_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _ServiceManager_UpdateService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ServiceManager_GetService_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _ServiceManager_GetServices_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _ServiceManager_DeleteService_Handler,
		},
		{
			MethodName: "AddFeeToService",
			Handler:    _ServiceManager_AddFeeToService_Handler,
		},
		{
			MethodName: "RemoveFeeToService",
			Handler:    _ServiceManager_RemoveFeeToService_Handler,
		},
		{
			MethodName: "CalculateCharges",
			Handler:    _ServiceManager_CalculateCharges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
