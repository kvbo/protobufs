// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: kyc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EntityService_CreateEntity_FullMethodName      = "/EntityService/CreateEntity"
	EntityService_GetEntities_FullMethodName       = "/EntityService/GetEntities"
	EntityService_GetEntityByRef_FullMethodName    = "/EntityService/GetEntityByRef"
	EntityService_UpdateEntityByRef_FullMethodName = "/EntityService/UpdateEntityByRef"
	EntityService_RemoveEntityByRef_FullMethodName = "/EntityService/RemoveEntityByRef"
	EntityService_CheckStatus_FullMethodName       = "/EntityService/CheckStatus"
)

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC service
type EntityServiceClient interface {
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	GetEntities(ctx context.Context, in *GetEntitiesRequest, opts ...grpc.CallOption) (*GetEntitiesResponse, error)
	GetEntityByRef(ctx context.Context, in *GetEntityByRefRequest, opts ...grpc.CallOption) (*GetEntityByRefResponse, error)
	UpdateEntityByRef(ctx context.Context, in *UpdateEntityByRefRequest, opts ...grpc.CallOption) (*UpdateEntityByRefResponse, error)
	RemoveEntityByRef(ctx context.Context, in *RemoveEntityByRefRequest, opts ...grpc.CallOption) (*RemoveEntityByRefResponse, error)
	CheckStatus(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error)
}

type entityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityServiceClient(cc grpc.ClientConnInterface) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEntityResponse)
	err := c.cc.Invoke(ctx, EntityService_CreateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetEntities(ctx context.Context, in *GetEntitiesRequest, opts ...grpc.CallOption) (*GetEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntitiesResponse)
	err := c.cc.Invoke(ctx, EntityService_GetEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetEntityByRef(ctx context.Context, in *GetEntityByRefRequest, opts ...grpc.CallOption) (*GetEntityByRefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityByRefResponse)
	err := c.cc.Invoke(ctx, EntityService_GetEntityByRef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateEntityByRef(ctx context.Context, in *UpdateEntityByRefRequest, opts ...grpc.CallOption) (*UpdateEntityByRefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEntityByRefResponse)
	err := c.cc.Invoke(ctx, EntityService_UpdateEntityByRef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) RemoveEntityByRef(ctx context.Context, in *RemoveEntityByRefRequest, opts ...grpc.CallOption) (*RemoveEntityByRefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveEntityByRefResponse)
	err := c.cc.Invoke(ctx, EntityService_RemoveEntityByRef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CheckStatus(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckStatusResponse)
	err := c.cc.Invoke(ctx, EntityService_CheckStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
// All implementations must embed UnimplementedEntityServiceServer
// for forward compatibility.
//
// gRPC service
type EntityServiceServer interface {
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	GetEntities(context.Context, *GetEntitiesRequest) (*GetEntitiesResponse, error)
	GetEntityByRef(context.Context, *GetEntityByRefRequest) (*GetEntityByRefResponse, error)
	UpdateEntityByRef(context.Context, *UpdateEntityByRefRequest) (*UpdateEntityByRefResponse, error)
	RemoveEntityByRef(context.Context, *RemoveEntityByRefRequest) (*RemoveEntityByRefResponse, error)
	CheckStatus(context.Context, *CheckStatusRequest) (*CheckStatusResponse, error)
	mustEmbedUnimplementedEntityServiceServer()
}

// UnimplementedEntityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntityServiceServer struct{}

func (UnimplementedEntityServiceServer) CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedEntityServiceServer) GetEntities(context.Context, *GetEntitiesRequest) (*GetEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntities not implemented")
}
func (UnimplementedEntityServiceServer) GetEntityByRef(context.Context, *GetEntityByRefRequest) (*GetEntityByRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityByRef not implemented")
}
func (UnimplementedEntityServiceServer) UpdateEntityByRef(context.Context, *UpdateEntityByRefRequest) (*UpdateEntityByRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntityByRef not implemented")
}
func (UnimplementedEntityServiceServer) RemoveEntityByRef(context.Context, *RemoveEntityByRefRequest) (*RemoveEntityByRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntityByRef not implemented")
}
func (UnimplementedEntityServiceServer) CheckStatus(context.Context, *CheckStatusRequest) (*CheckStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedEntityServiceServer) mustEmbedUnimplementedEntityServiceServer() {}
func (UnimplementedEntityServiceServer) testEmbeddedByValue()                       {}

// UnsafeEntityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServiceServer will
// result in compilation errors.
type UnsafeEntityServiceServer interface {
	mustEmbedUnimplementedEntityServiceServer()
}

func RegisterEntityServiceServer(s grpc.ServiceRegistrar, srv EntityServiceServer) {
	// If the following call pancis, it indicates UnimplementedEntityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EntityService_ServiceDesc, srv)
}

func _EntityService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntities(ctx, req.(*GetEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetEntityByRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityByRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntityByRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetEntityByRef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntityByRef(ctx, req.(*GetEntityByRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateEntityByRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityByRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateEntityByRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_UpdateEntityByRef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateEntityByRef(ctx, req.(*UpdateEntityByRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_RemoveEntityByRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityByRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).RemoveEntityByRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_RemoveEntityByRef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).RemoveEntityByRef(ctx, req.(*RemoveEntityByRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_CheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CheckStatus(ctx, req.(*CheckStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityService_ServiceDesc is the grpc.ServiceDesc for EntityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _EntityService_CreateEntity_Handler,
		},
		{
			MethodName: "GetEntities",
			Handler:    _EntityService_GetEntities_Handler,
		},
		{
			MethodName: "GetEntityByRef",
			Handler:    _EntityService_GetEntityByRef_Handler,
		},
		{
			MethodName: "UpdateEntityByRef",
			Handler:    _EntityService_UpdateEntityByRef_Handler,
		},
		{
			MethodName: "RemoveEntityByRef",
			Handler:    _EntityService_RemoveEntityByRef_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _EntityService_CheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyc.proto",
}
